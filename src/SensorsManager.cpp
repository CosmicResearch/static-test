/**
 *   Copyright (C) 2018  Guillem Castro
 *
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "SensorsManager.h"

void SensorsManager::addSensor(std::shared_ptr<Sensor> sensor) {
    LOG(INFO) << "Attached sensor to SensorsManager";
    std::unique_lock<std::mutex> lck(mtx);
    this->sensors.push_back(sensor);
}

void SensorsManager::start() {
    if (this->started) {
        throw already_started_exception();
    }
    for (auto& sensor : sensors) {
        sensor->start();
    }
    this->sensor_thread = thread(&SensorsManager::run, this);
    int priority = thread::getMaxSchedulingPriority(SCHED_RR);
    this->sensor_thread.setScheduling(SCHED_RR, priority);
    started = true;
}

void SensorsManager::stop() {
    if (!this->started) {
        throw not_started_exception();
    }
    if (this->stopped) {
        return;
    }

    for (auto& sensor : sensors) {
        sensor->stop();
    }

    LOG(INFO) << "Stopping SensorsManager";

    this->stopped = true;
}

void SensorsManager::run() {
    //Run until stop() is called 
    while (!stopped) {
        //Create a lock preventing adding a Sensor while this loop is running
        std::unique_lock<std::mutex> lck(mtx);
        for (auto& sensor : sensors) {
            //Fetch the data generated by the sensor
            pool.AddJob([dispatcher=this->dispatcher, sensor=sensor]() {
                try {
                    sensor->fetch(dispatcher);
                }
                catch (const std::exception& e) {
                    LOG(WARNING) << "While trying to read sensor" << e.what();
                }
            });
        }
        //Triger a fetch every 10 ms
        this_thread::high_precision_sleep_for(10000000);
    }
    pool.JoinAll();
    LOG(INFO) << "SensorsManager stopped";
}